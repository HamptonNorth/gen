# path to root of target directory
APPPATH="C:/Users/rcollins/code/"

# target directory for generation
APPDIR="gen-test"

# Generate a skeleton dirs/files YES or NO/no/anything
GENERATESKELETON=NO

# Overwrite existing skeleton dirs/files YES or NO/no/anything
# There is a different overwrite for routes
OVERWRITESKELETON=YES

# Database provider, user and database name (add password using editor)
DATABASEPROVIDER=MYSQL
DATABASEHOST=localhost
DATABASEUSER=root
DATABASENAME=redmugapi
DATABASEWAITFORCONNECTIONS=true,
DATABASECONNECTIONLIMIT=10,
DATABASEQUEUELIMIT=0

# generate routes YES or NO/no/anything
# route details are passed as options
GENERATEROUTES=YES

# Overwrite the route if exists
OVERWRITEROUTE=YES

# route name may be for example
#  users              (no parameters)
#  user/:id           (data passed as part of url e.g.   /user/1)
#  search?name=       (data passed url query string parameter e.g search?name=wilson) 
#
# route names are converted to lower case - N.B. no leading 'slash' 
ROUTENAME=user/:id

# route method may be GET, POST, PUT or DELETE
# data for GET is passed as part of URL or as string parameter - request body ignored
# data for POST, PUT and DELETE always passed as part of request body
ROUTEMETHOD=GET

# request body - generator will add suitable code pass through listed fields
# Only used if method POST, PUT or DELETE
# e.g for a /creatuser url the object keys might be {display-name, email, role, status}
# dummy code will be created for these request body object keys
ROUTEREQUESTBODY={}

# the JSON object returned if no working SQL implemented - use for initial testing
# if empty default to:
# [{"id": 1,"email": "someone@redmug.dev","role": "superuser"}, {"id": 2,"email": "support@redmug.dev","role": "user"}]
ROUTETESTRESPONSE=

# port to listen on
PORT=3005
