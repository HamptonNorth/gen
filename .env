# path to root of target directory
APPPATH="C:/Users/rcollins/code/"

# target directory for generation
APPDIR="gen-test"

# port to listen on
PORT=3005

# Database provider, user and database name (add password using editor)
DATABASEPROVIDER=MYSQL
DATABASEHOST=localhost
DATABASEUSER=root
DATABASENAME=redmugapi
DATABASEWAITFORCONNECTIONS=true,
DATABASECONNECTIONLIMIT=10,
DATABASEQUEUELIMIT=0

# skeleton ######################################################################
# Generate a skeleton dirs/files YES or NO/no/anything
GENERATESKELETON=NO

# Overwrite existing skeleton dirs/files YES or NO/no/anything
# There is a different overwrite for routes
OVERWRITESKELETON=NO

# create a routes config by copying the routes-config-sample.json file
CREATEROUTESCONFIGFROMSAMPLE=YES


# route ########################################################################serrated paper knife

# generate routes YES or NO/no/anything
GENERATEROUTES=NO
# Overwrite the route if exists
OVERWRITEROUTE=YES


# GET route name may be for example
#    users              (no parameters)
#    user/:id           (data passed as part of url e.g.   /user/1)
#    search?name=       (data passed url query string parameter e.g search?name=wilson) 
#
# POST route example
#    adduser   (with data in ROUTEREQUESTBODY)
#
# route names are converted to lower case - N.B. no leading 'slash' 
ROUTENAME=searchusers?name=wilson

# route method may be GET, POST, PUT or DELETE
# data for GET is passed as part of URL or as string parameter - request body ignored
# data for POST, PUT and DELETE always passed as part of request body
ROUTEMETHOD=GET

# request body - generator will add suitable code pass through listed fields
# Only used if method POST, PUT or DELETE
# e.g for a /creatuser url the object keys might be {display-name, email, role, status}
# dummy code will be created for these request body object keys
# example body content [{"display_name": "Route Two",	"email": "rcollins@redmug.dev",	"client_id": 1,	"user_status": 0, "last_login": "2000-01-01 00:00:00",	"role": "superuser" }]
ROUTEREQUESTBODY=

# the JSON object returned if no working SQL implemented - use for initial testing
# if empty default to:
# {"status": "success",	"data": {"users": [{"id": 1,"email": "someone@redmug.dev", "role": "superuser"},{"id": 2,"email": "support@redmug.dev", "role": "user"}]}}
#
#ROUTETESTRESPONSE={"status": "success",	"data": {"users": [{"id": 1,"email": "someone@redmug.dev", "role": "superuser"},{"id": 2,"email": "support@redmug.dev", "role": "user"}]}}
#ROUTETESTRESPONSE={"status": "success",	"data": {"user": {"id": 1,"email": "someone@redmug.dev", "role": "superuser"}}}
ROUTETESTRESPONSE={"status": "success",	"data": {"users": [{"id": 12,"email": "swilson@redmug.dev", "role": "user"},{"id": 52,"email": "ajwilson@redmug.dev", "role": "user"},{"id": 67,"email": "shwilson@redmug.dev", "role": "user"}]}}

# Route description used in markdown API documentation
ROUTEDESCRIPTION=//TODO Add a short route description here

# Route fail response messages used in markdown API documentation (may be multiple, separate with | )
ROUTEFAILMESSAGES=role must be superuser or user|Not permitted - contact your administrator

# Route notes used in markdown API documentation
ROUTENOTES=Search matches on the start on name and is case insensitve
